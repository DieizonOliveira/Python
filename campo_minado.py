import os
import random
import time

jogo = []        # Matriz que representa o tabuleiro do jogo
espa√ßo = "‚¨úÔ∏è"    
bomba = "üß®"      
vazio = "  "      


# Limpar o terminal e exibir o cabe√ßalho do jogo
def cabe√ßalho():
    os.system("cls" if os.name == "nt" else "clear")  # Limpa o terminal
    print("üí£ CAMPO MINADO üß®")                       
    print("_" * 30)                                   


# Fun√ß√£o para preencher a matriz (tabuleiro) com bombas de forma aleat√≥ria
def preencheMatriz():
    cabe√ßalho()                              # Exibe o cabe√ßalho do jogo
    global jogo                              # Acessa √† vari√°vel global jogo, Matriz
    jogo = [[espa√ßo for _ in range(5)] for _ in range(5)]  # Cria uma matriz 5x5 com c√©lulas vazias
    minas_colocadas = 0                      # Contador de bombas colocadas

    # Loop para colocar 5 bombas aleatoriamente no tabuleiro
    while minas_colocadas < 5:
        linha = random.randint(0, 4)         
        coluna = random.randint(0, 4)        
        if jogo[linha][coluna] != bomba:     # Verifica se a posi√ß√£o j√° n√£o possui uma bomba
            jogo[linha][coluna] = bomba      # Coloca a bomba na posi√ß√£o aleat√≥ria
            minas_colocadas += 1             # Incrementa o contador de bombas colocadas


# Fun√ß√£o para mostrar o tabuleiro atual do jogo
def mostraTabuleiro(revelar_minas=False):
    cabe√ßalho()                               # Exibe o cabe√ßalho do jogo
    print(f"Jogador: {nome_jogador}")          # Exibe o nome do jogador
    print("  1  2  3  4  5")                  # Numera√ß√£o das colunas
    for i in range(5):
        print(f"{i+1} ", end="")               # Numera√ß√£o da linha
        for j in range(5):
            if jogo[i][j] == bomba:
                if revelar_minas:
                    print(bomba + " ", end="")
                else:
                    print(espa√ßo + " ", end="")
            else:
                # Ajuste para alinhar corretamente os n√∫meros
                if jogo[i][j] == vazio or jogo[i][j] == espa√ßo:
                    print(jogo[i][j] + " ", end="")
                else:
                    print(f"{jogo[i][j]} " if len(str(jogo[i][j])) == 1 else f"{jogo[i][j]}", end=" ")
        print("")


# Fun√ß√£o para contar quantas bombas est√£o ao redor de uma c√©lula espec√≠fica
def contaBombas(linha, coluna):
    dire√ß√µes = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]  # Dire√ß√µes vizinhas
    bombas_ao_redor = 0                      # Contador de bombas ao redor
    for d in dire√ß√µes:
        nova_linha, nova_coluna = linha + d[0], coluna + d[1]  # Calcula a nova posi√ß√£o vizinha
        if 0 <= nova_linha < 5 and 0 <= nova_coluna < 5:       # Verifica se a posi√ß√£o √© v√°lida no tabuleiro
            if jogo[nova_linha][nova_coluna] == bomba:        # Verifica se h√° uma bomba na posi√ß√£o vizinha
                bombas_ao_redor += 1                          # Incrementa o contador de bombas ao redor
    return bombas_ao_redor                                   # Retorna o n√∫mero de bombas ao redor


# Fun√ß√£o para revelar c√©lulas vazias e seus vizinhos
def revelaCelulas(linha, coluna):
    if jogo[linha][coluna] != espa√ßo:         # Verifica se a c√©lula j√° foi revelada
        return
    bombas_ao_redor = contaBombas(linha, coluna)  
    if bombas_ao_redor == 0:                  # Se n√£o h√° bombas ao redor, revela as c√©lulas vizinhas
        jogo[linha][coluna] = vazio           # Marca a c√©lula como vazia revelada
        dire√ß√µes = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]  
        for d in dire√ß√µes:
            nova_linha, nova_coluna = linha + d[0], coluna + d[1]  
            if 0 <= nova_linha < 5 and 0 <= nova_coluna < 5:       
                revelaCelulas(nova_linha, nova_coluna)           
    else:
        jogo[linha][coluna] = f"{bombas_ao_redor}"  # Se houver bombas ao redor, mostra quantas s√£o


# Fun√ß√£o para verificar se todas as c√©lulas seguras foram reveladas (vit√≥ria)
def verificaVitoria():
    for i in range(5):
        for j in range(5):
            if jogo[i][j] == espa√ßo:           # Verifica se ainda h√° c√©lulas vazias n√£o reveladas
                return False                    # Se encontrar uma c√©lula vazia n√£o revelada, n√£o h√° vit√≥ria
    return True                                 # Se todas as c√©lulas seguras foram reveladas, h√° vit√≥ria


# Fun√ß√£o para salvar o recorde do jogador no arquivo "recordes.txt"
def salvarRecorde(nome, tempo):
    with open("recordes.txt", "a") as arquivo:   # Abre o arquivo em modo de adi√ß√£o
        arquivo.write(f"{nome} ‚Äì {tempo:.2f} segundos\n")  # Escreve o nome do jogador e o tempo de jogo


# Fun√ß√£o para mostrar os recordes salvos no arquivo "recordes.txt"
def mostrarRecordes():
    try:
        with open("recordes.txt", "r") as arquivo:  # Abre o arquivo em modo de leitura
            recordes = arquivo.readlines()          # L√™ todas as linhas do arquivo
            if recordes:
                recordes_formatados = []
                for recorde in recordes:
                    nome, tempo = recorde.rsplit(" ‚Äì ", 1)  # Separa o nome e o tempo
                    recordes_formatados.append((nome.strip(), float(tempo.strip().split()[0])))

                # Ordena os recordes pelo tempo (segundo elemento da tupla)
                recordes_ordenados = sorted(recordes_formatados, key=lambda x: x[1])

                print("üí£ CAMPO MINADO üß®¬Æ \n Recordes:")
                for i, recorde in enumerate(recordes_ordenados, start=1):
                    print(f"{i}. {recorde[0]} ‚Äì {recorde[1]:.2f} segundos")
            else:
                print("Nenhum recorde encontrado.")  # Se n√£o houver recordes, exibe mensagem
    except FileNotFoundError:
        print("Nenhum recorde encontrado.")          # Se o arquivo n√£o existir, exibe mensagem


# Fun√ß√£o principal que controla o fluxo do jogo
def jogada():
    inicio = time.time()                           # Marca o tempo de in√≠cio do jogo
    while True:
        try:
            x = int(input("Digite o n√∫mero da linha (De 1 a 5): ")) - 1  # Solicita a linha ao jogador
            y = int(input("Digite o n√∫mero da coluna (De 1 a 5): ")) - 1  # Solicita a coluna ao jogador
            if 0 <= x < 5 and 0 <= y < 5:           # Verifica se as coordenadas est√£o dentro dos limites do tabuleiro
                linha = x
                coluna = y
                if jogo[linha][coluna] == bomba:    # Se a c√©lula escolhida for uma bomba, o jogador perde
                    mostraTabuleiro(revelar_minas=True)  # Mostra todas as bombas
                    print("\nüí£üí£üí£ Voc√™ explodiu! üíÄ‚ö∞Ô∏è")
                    jogo_novo = input("Jogar novamente? (s/n): ").upper()
                    if jogo_novo == "S":           # Op√ß√£o para jogar novamente
                        preencheMatriz()          # Reinicia o jogo com um novo tabuleiro
                        mostraTabuleiro()
                    else:                          # Se n√£o quiser jogar novamente, encerra o jogo
                        print("üí£ CAMPO MINADO üß®¬Æ")
                        return
                elif jogo[linha][coluna] == espa√ßo:
                    revelaCelulas(linha, coluna)
                    mostraTabuleiro()
                    if verificaVitoria():
                        mostraTabuleiro(revelar_minas=True)
                        fim = time.time()
                        tempo_total = fim - inicio
                        print(f"\n Parab√©ns, {nome_jogador}! Voc√™ venceu!")
                        salvarRecorde(nome_jogador, tempo_total)
                        return
        except ValueError:
            print("Erro! ‚ö†Ô∏è Verifique o valor digitado!")


# Fun√ß√£o para exibir o menu inicial e controlar as op√ß√µes do jogo
def menuInicial():
    while True:
        cabe√ßalho()  # Exibe o cabe√ßalho do jogo
        print("1. Jogar")
        print("2. Ver recordes")
        print("3. Sair")
        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == "1":  #Inicia o Jogo
            global nome_jogador
            nome_jogador = input("Digite seu nome: ")  
            preencheMatriz()  
            mostraTabuleiro()  
            jogada()  
        elif escolha == "2":  # Visualiza os recordes
            mostrarRecordes() 
            input("Pressione Enter para voltar ao menu...")  
        elif escolha == "3":  # Sai do jogo
            print("üí£ CAMPO MINADO üß®¬Æ")  # Mensagem de sa√≠da
            break  # Encerra o loop e finaliza o jogo
        else:
            print("Op√ß√£o inv√°lida!! Tente novamente.")  # Mensagem de erro se a op√ß√£o digitada n√£o existir


# Inicializa√ß√£o do jogo chamando o menu inicial
menuInicial()
